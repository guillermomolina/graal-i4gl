package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.dsl.TypeSystemReference;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.I4GLTypeSystem;
import i4gl.nodes.expression.ExpressionNode;
import i4gl.nodes.statement.StatementNode;
import i4gl.runtime.values.BigIntArray;
import i4gl.runtime.values.CharArray;
import i4gl.runtime.values.FloatArray;
import i4gl.runtime.values.IntArray;
import i4gl.runtime.values.SmallFloatArray;
import i4gl.runtime.values.SmallIntArray;

/**
 * Node representing assignment to an array. Compared to
 * {@link AssignToLocalVariableNode} it has to receive also index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToArrayNodeGen}
 */
@NodeChild(value = "arrayNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
@TypeSystemReference(I4GLTypeSystem.class)
public abstract class AssignToIndexedNode extends StatementNode {
    
    @Specialization
    void assignToChar1Array(CharArray array, int index, char value) {
        array.setValueAt(index - 1, value);
    }
    
    @Specialization
    void assignToSmallIntArray(SmallIntArray array, int index, short value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToIntArray(IntArray array, int index, int value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToBigIntArray(BigIntArray array, int index, long value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToSmallFloatArray(SmallFloatArray array, int index, float value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToDoubleArray(FloatArray array, int index, double value) {
        array.setValueAt(index - 1, value);
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }

}
