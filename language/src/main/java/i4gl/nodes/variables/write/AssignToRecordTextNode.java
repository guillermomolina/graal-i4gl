package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.dsl.TypeSystemReference;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.I4GLTypeSystem;
import i4gl.nodes.expression.ExpressionNode;
import i4gl.nodes.statement.StatementNode;
import i4gl.runtime.types.BaseType;
import i4gl.runtime.types.compound.CharType;
import i4gl.runtime.types.compound.TextType;
import i4gl.runtime.types.compound.VarcharType;
import i4gl.runtime.values.Char;
import i4gl.runtime.values.Record;
import i4gl.runtime.values.Varchar;

/**
 * Node representing assignment to a record. Compared to
 * {@link AssignToLocalVariableNode} it assigns the value to the record's frame
 * instead of function's frame.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToRecordFieldNodeGen}
 */
@NodeChild(value = "recordNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
@TypeSystemReference(I4GLTypeSystem.class)
public abstract class AssignToRecordTextNode extends StatementNode {

    private final String identifier;
    private final BaseType descriptor;

    AssignToRecordTextNode(String identifier, BaseType descriptor) {
        this.identifier = identifier;
        this.descriptor = descriptor;
    }

    protected boolean isChar() {
        return descriptor instanceof CharType;
    }

    @Specialization(guards = "isChar()")
    void assignChar(Record record, int index, String value) {
        Object targetObject = record.get(identifier);
        if (!(targetObject instanceof Char)) {
            targetObject = descriptor.getDefaultValue();
            record.put(identifier, targetObject);
        }

        final Char target = (Char) targetObject;
        target.setCharAt(index - 1, value.charAt(0));
    }

    protected boolean isVarchar() {
        return descriptor instanceof VarcharType;
    }

    @Specialization(guards = "isVarchar()")
    void assignVarchar(Record record, int index, String value) {
        Object targetObject = record.get(identifier);
        if (!(targetObject instanceof Varchar)) {
            targetObject = descriptor.getDefaultValue();
            record.put(identifier, targetObject);
        }

        final Varchar target = (Varchar) targetObject;
        target.setCharAt(index - 1, value.charAt(0));
    }

    protected boolean isText() {
        return descriptor instanceof TextType;
    }

    @Specialization(guards = "isText()")
    void assignText(Record record, int index, String value) {
        Object targetObject = record.get(identifier);
        if (!(targetObject instanceof String)) {
            targetObject = "";
        }
        StringBuilder builder = new StringBuilder((String) targetObject);
        builder.setCharAt(index, value.charAt(0));
        record.put(identifier, targetObject);
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
