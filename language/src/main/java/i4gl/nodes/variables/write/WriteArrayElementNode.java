package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;
import com.oracle.truffle.api.interop.InteropLibrary;
import com.oracle.truffle.api.interop.InvalidArrayIndexException;
import com.oracle.truffle.api.interop.UnsupportedMessageException;
import com.oracle.truffle.api.interop.UnsupportedTypeException;
import com.oracle.truffle.api.library.CachedLibrary;

import i4gl.exceptions.IndexOutOfBoundsException;
import i4gl.nodes.expression.ExpressionNode;
import i4gl.nodes.statement.StatementNode;
import i4gl.runtime.types.BaseType;

/**
 * Node representing assignment to an array. Compared to
 * {@link AssignToLocalVariableNode} it has to receive also index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToArrayNodeGen}
 */
@NodeChild(value = "arrayNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
@NodeField(name = "elementType", type = BaseType.class)
public abstract class WriteArrayElementNode extends StatementNode {

    static final int LIBRARY_LIMIT = 3;

    // TODO: Check correct type at runtime
    protected abstract BaseType getElementType();

    @Specialization(guards = "arrays.hasArrayElements(array)", limit = "LIBRARY_LIMIT")
    protected void writeArray(Object array, Object index, Object value,
            @CachedLibrary("array") InteropLibrary arrays,
            @CachedLibrary("index") InteropLibrary numbers) {
        try {
            arrays.writeArrayElement(array, numbers.asLong(index) - 1, value);
        } catch (UnsupportedMessageException | UnsupportedTypeException | InvalidArrayIndexException e) {
            throw new IndexOutOfBoundsException(this);
        }
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
