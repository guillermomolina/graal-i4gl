package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;
import com.oracle.truffle.api.interop.InvalidArrayIndexException;

import i4gl.exceptions.I4GLRuntimeException;
import i4gl.exceptions.ShouldNotReachHereException;
import i4gl.nodes.expression.ExpressionNode;
import i4gl.nodes.statement.StatementNode;
import i4gl.runtime.types.BaseType;
import i4gl.runtime.values.Array;
import i4gl.runtime.values.Char;
import i4gl.runtime.values.Varchar;

/**
 * Node representing assignment to an array. Compared to
 * {@link AssignToLocalVariableNode} it has to receive also index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToArrayNodeGen}
 */
@NodeChild(value = "arrayNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
@NodeField(name = "elementType", type = BaseType.class)
public abstract class WriteArrayElementNode extends StatementNode {

    // TODO: Check correct type at runtime
    protected abstract BaseType getElementType();

    @Specialization
    void writeChar1(char[] array, int index, char value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeSmallInt(short[] array, int index, short value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeInt(int[] array, int index, int value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeBigInt(long[] array, int index, long value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeSmallFloat(float[] array, int index, float value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeFloat(double[] array, int index, double value) {
        array[index - 1] = value;
    }

    @Specialization(replaces = { "writeChar1", "writeSmallInt", "writeInt", "writeBigInt", "writeSmallFloat", "writeFloat" })
    void writeObject(final Object[] array, int index, final Object value) {
        array[index - 1] = value;
    }

    @Specialization
    void writeChar(final Char string, final int index, final char value) {
        string.setCharAt(index - 1, value);
    }
  
    @Specialization
    void writeChar(final Char string, final int index, final String value) {
        string.setCharAt(index - 1, value.charAt(0));
    }
   
    @Specialization
    void writeVarchar(final Varchar string, final int index, final char value) {
        string.setCharAt(index - 1, value);
    }
   
    @Specialization
    void writeVarchar(final Varchar string, final int index, final String value) {
        string.setCharAt(index - 1, value.charAt(0));
    }

    @Specialization
    void writeArray(final Array array, int index, final Object value) {
        try {
            array.setValueAt(index - 1, value);
        } catch (InvalidArrayIndexException e) {
            throw new I4GLRuntimeException(e.getMessage());
        }
    }

    @Specialization
    void writeObject(final Object array, int index, final Object value) {
        throw new ShouldNotReachHereException();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
