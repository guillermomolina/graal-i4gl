package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.nodes.expression.ExpressionNode;
import i4gl.nodes.statement.StatementNode;
import i4gl.runtime.types.BaseType;
import i4gl.runtime.types.primitive.BigIntType;
import i4gl.runtime.types.primitive.FloatType;
import i4gl.runtime.types.primitive.IntType;
import i4gl.runtime.types.primitive.SmallFloatType;
import i4gl.runtime.types.primitive.SmallIntType;
import i4gl.runtime.values.I4GLRecord;

/**
 * Node representing assignment to a record. Compared to {@link AssignToLocalVariableNode} it assigns the value to the record's
 * frame instead of function's frame.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link AssignToRecordFieldNodeGen}
 */
@NodeChild(value = "recordNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
public abstract class AssignToRecordFieldNode extends StatementNode {

    private final String identifier;
    private final BaseType descriptor;

    AssignToRecordFieldNode(String identifier, BaseType descriptor) {
        this.identifier = identifier;
        this.descriptor = descriptor;
    }

    protected boolean isSmallInt() {
        return descriptor == SmallIntType.SINGLETON;
    }

    @Specialization(guards = "isSmallInt()")
    void assignSmallInt(I4GLRecord record, short value) {
        record.put(identifier, value);
    }

    protected boolean isInt() {
        return descriptor == IntType.SINGLETON;
    }

    @Specialization(guards = "isInt()")
    void assignInt(I4GLRecord record, int value) {
        record.put(identifier, value);
    }

    protected boolean isBigInt() {
        return descriptor == BigIntType.SINGLETON;
    }

    @Specialization(guards = "isBigInt()")
    void assignBigInt(I4GLRecord record, long value) {
        record.put(identifier, value);
    }

    protected boolean isSmallFloat() {
        return descriptor == SmallFloatType.SINGLETON;
    }

    @Specialization(guards = "isSmallFloat()")
    void assignSmallFloat(I4GLRecord record, float value) {
        record.put(identifier, value);
    }

    protected boolean isFloat() {
        return descriptor == FloatType.SINGLETON;
    }

    @Specialization(guards = "isFloat()")
    void assignDouble(I4GLRecord record, double value) {
        record.put(identifier, value);
    }

    @Specialization
    void assignGeneric(I4GLRecord record, Object value) {
        record.put(identifier, value);
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
