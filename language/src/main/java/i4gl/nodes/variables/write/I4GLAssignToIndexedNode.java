package i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.dsl.TypeSystemReference;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.nodes.I4GLTypeSystem;
import i4gl.nodes.expression.I4GLExpressionNode;
import i4gl.nodes.statement.I4GLStatementNode;
import i4gl.runtime.values.I4GLBigIntArray;
import i4gl.runtime.values.I4GLCharArray;
import i4gl.runtime.values.I4GLFloatArray;
import i4gl.runtime.values.I4GLIntArray;
import i4gl.runtime.values.I4GLSmallFloatArray;
import i4gl.runtime.values.I4GLSmallIntArray;

/**
 * Node representing assignment to an array. Compared to
 * {@link I4GLAssignToLocalVariableNode} it has to receive also index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToArrayNodeGen}
 */
@NodeChild(value = "arrayNode", type = I4GLExpressionNode.class)
@NodeChild(value = "indexNode", type = I4GLExpressionNode.class)
@NodeChild(value = "valueNode", type = I4GLExpressionNode.class)
@TypeSystemReference(I4GLTypeSystem.class)
public abstract class I4GLAssignToIndexedNode extends I4GLStatementNode {
    
    @Specialization
    void assignToChar1Array(I4GLCharArray array, int index, char value) {
        array.setValueAt(index - 1, value);
    }
    
    @Specialization
    void assignToSmallIntArray(I4GLSmallIntArray array, int index, short value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToIntArray(I4GLIntArray array, int index, int value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToBigIntArray(I4GLBigIntArray array, int index, long value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToSmallFloatArray(I4GLSmallFloatArray array, int index, float value) {
        array.setValueAt(index - 1, value);
    }

    @Specialization
    void assignToDoubleArray(I4GLFloatArray array, int index, double value) {
        array.setValueAt(index - 1, value);
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }

}
