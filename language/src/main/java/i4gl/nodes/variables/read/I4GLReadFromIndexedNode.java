package i4gl.nodes.variables.read;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.nodes.expression.I4GLExpressionNode;
import i4gl.runtime.types.I4GLType;
import i4gl.runtime.values.I4GLBigIntArray;
import i4gl.runtime.values.I4GLChar;
import i4gl.runtime.values.I4GLCharArray;
import i4gl.runtime.values.I4GLFloatArray;
import i4gl.runtime.values.I4GLIntArray;
import i4gl.runtime.values.I4GLRecord;
import i4gl.runtime.values.I4GLRecordArray;
import i4gl.runtime.values.I4GLSmallFloatArray;
import i4gl.runtime.values.I4GLSmallIntArray;
import i4gl.runtime.values.I4GLVarchar;

/**
 * This nodes read value from an array at specified index.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromArrayNodeGen}
 */

@NodeChild(value = "valueNode", type = I4GLExpressionNode.class)
@NodeChild(value = "indexNode", type = I4GLExpressionNode.class)
@NodeField(name = "returnType", type = I4GLType.class)
public abstract class I4GLReadFromIndexedNode extends I4GLExpressionNode {

    protected abstract I4GLType getReturnType();

    @Specialization
    String readText(String string, int index) {
        return Character.toString((string.charAt(index - 1)));
    }

    @Specialization
    String readChar(I4GLChar charValue, int index) {
        return Character.toString(charValue.getCharAt(index - 1));
    }

    @Specialization
    String readVarchar(I4GLVarchar varchar, int index) {
        return Character.toString(varchar.getCharAt(index - 1));
    }

    @Specialization
    char readCharArray(I4GLCharArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    short readSmallIntArray(I4GLSmallIntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    int readIntArray(I4GLIntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    long readBigIntArray(I4GLBigIntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    float readSmallFloatArray(I4GLSmallFloatArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    double readFloatArray(I4GLFloatArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    I4GLRecord readRecordArray(I4GLRecordArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    Object readGeneric(Object[] array, int index) {
        return array[index - 1];
    }

    @Override
    public I4GLType getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }

}
