package i4gl.nodes.variables.read;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.nodes.expression.ExpressionNode;
import i4gl.runtime.types.BaseType;
import i4gl.runtime.values.Record;

/**
 * This node reads value from an record with specified identifier.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromRecordNodeGen}
 */
@NodeChild(value = "record", type = ExpressionNode.class)
@NodeField(name = "identifier", type = String.class)
@NodeField(name = "returnType", type = BaseType.class)
public abstract class ReadFromRecordNode extends ExpressionNode {

    protected abstract BaseType getReturnType();

    protected abstract String getIdentifier();

    @Specialization(guards = "record.isSmallInt(getIdentifier())")
    short readSmallInt(Record record) {
        return record.getSmallIntSafe(getIdentifier());
    }

    @Specialization(guards = "record.isInt(getIdentifier())")
    int readInt(Record record) {
        return record.getIntSafe(getIdentifier());
    }

    @Specialization(guards = "record.isBigInt(getIdentifier())")
    long readBigInt(Record record) {
        return record.getBigIntSafe(getIdentifier());
    }

    @Specialization(guards = "record.isSmallFloat(getIdentifier())")
    float readSmallFloat(Record record) {
        return (float)record.getSmallFloatSafe(getIdentifier());
    }

    @Specialization(guards = "record.isFloat(getIdentifier())")
    double readFloat(Record record) {
        return (double)record.getFloatSafe(getIdentifier());
    }

    @Specialization(replaces = { "readInt", "readBigInt", "readSmallFloat", "readFloat" })
    Object readGeneric(Record record) {
        return record.get(getIdentifier());
    }

    @Override
    public BaseType getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }
}
