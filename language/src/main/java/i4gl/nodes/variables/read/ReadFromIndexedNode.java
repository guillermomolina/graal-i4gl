package i4gl.nodes.variables.read;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.nodes.expression.ExpressionNode;
import i4gl.runtime.types.BaseType;
import i4gl.runtime.values.BigIntArray;
import i4gl.runtime.values.Char;
import i4gl.runtime.values.CharArray;
import i4gl.runtime.values.FloatArray;
import i4gl.runtime.values.IntArray;
import i4gl.runtime.values.Record;
import i4gl.runtime.values.RecordArray;
import i4gl.runtime.values.SmallFloatArray;
import i4gl.runtime.values.SmallIntArray;
import i4gl.runtime.values.Varchar;

/**
 * This nodes read value from an array at specified index.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromArrayNodeGen}
 */

@NodeChild(value = "valueNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeField(name = "returnType", type = BaseType.class)
public abstract class ReadFromIndexedNode extends ExpressionNode {

    protected abstract BaseType getReturnType();

    @Specialization
    String readText(String string, int index) {
        return Character.toString((string.charAt(index - 1)));
    }

    @Specialization
    String readChar(Char charValue, int index) {
        return Character.toString(charValue.getCharAt(index - 1));
    }

    @Specialization
    String readVarchar(Varchar varchar, int index) {
        return Character.toString(varchar.getCharAt(index - 1));
    }

    @Specialization
    char readCharArray(CharArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    short readSmallIntArray(SmallIntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    int readIntArray(IntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    long readBigIntArray(BigIntArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    float readSmallFloatArray(SmallFloatArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    double readFloatArray(FloatArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    Record readRecordArray(RecordArray array, int index) {
        return array.getValueAt(index - 1);
    }

    @Specialization
    Object readGeneric(Object[] array, int index) {
        return array[index - 1];
    }

    @Override
    public BaseType getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }

}
