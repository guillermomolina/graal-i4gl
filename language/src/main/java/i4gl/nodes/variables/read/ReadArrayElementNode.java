package i4gl.nodes.variables.read;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;
import com.oracle.truffle.api.interop.InteropLibrary;
import com.oracle.truffle.api.interop.InvalidArrayIndexException;
import com.oracle.truffle.api.interop.UnsupportedMessageException;
import com.oracle.truffle.api.library.CachedLibrary;

import i4gl.exceptions.IndexOutOfBoundsException;
import i4gl.nodes.expression.ExpressionNode;
import i4gl.runtime.types.BaseType;

/**
 * This nodes read value from an array at specified index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle.
 * {@link ReadFromArrayNodeGen}
 */

@NodeChild(value = "valueNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeField(name = "elementType", type = BaseType.class)
public abstract class ReadArrayElementNode extends ExpressionNode {

    static final int LIBRARY_LIMIT = 3;

    // TODO: Check correct type at runtime
    protected abstract BaseType getElementType();

    @Override
    public BaseType getReturnType() {
        return getElementType();
    }

    @Specialization(guards = "arrays.hasArrayElements(array)", limit = "LIBRARY_LIMIT")
    protected Object readArray(Object array, Object index,
            @CachedLibrary("array") InteropLibrary arrays,
            @CachedLibrary("index") InteropLibrary numbers) {
        try {
            return arrays.readArrayElement(array, numbers.asLong(index) - 1);
        } catch (UnsupportedMessageException | InvalidArrayIndexException e) {
            throw new IndexOutOfBoundsException(this);
        }
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }

}
