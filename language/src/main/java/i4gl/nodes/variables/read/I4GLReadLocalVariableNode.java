package i4gl.nodes.variables.read;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.FrameUtil;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import i4gl.exceptions.NotImplementedException;
import i4gl.nodes.expression.I4GLExpressionNode;
import i4gl.runtime.types.BaseType;

/**
 * This node reads value of specified local variable (by its frame slot).
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link ReadLocalVariableNodeGen}
 */
@NodeField(name = "slot", type = FrameSlot.class)
@NodeField(name = "type", type = BaseType.class)
public abstract class I4GLReadLocalVariableNode extends I4GLExpressionNode {

    protected abstract FrameSlot getSlot();

    @Specialization(guards = "frame.isByte(getSlot())")
    protected char readChar(final VirtualFrame frame) {
        return (char)FrameUtil.getByteSafe(frame, getSlot());
    }
/*
    @Specialization(guards = "frame.isShort(getSlot())")
    protected short readSmallInt(final VirtualFrame frame) {
        return FrameUtil.getShortSafe(frame, getSlot());
    }
*/
    @Specialization(guards = "frame.isInt(getSlot())")
    protected int readInt(final VirtualFrame frame) {
        return FrameUtil.getIntSafe(frame, getSlot());
    }

    @Specialization(guards = "frame.isLong(getSlot())")
    protected long readBigInt(final VirtualFrame frame) {
        return FrameUtil.getLongSafe(frame, getSlot());
    }

    @Specialization(guards = "frame.isFloat(getSlot())")
    protected float readSmallFloat(final VirtualFrame frame) {
        return FrameUtil.getFloatSafe(frame, getSlot());
    }

    @Specialization(guards = "frame.isDouble(getSlot())")
    protected double readFloat(final VirtualFrame frame) {
        return FrameUtil.getDoubleSafe(frame, getSlot());
    }

    @Specialization(replaces = { "readChar", /*"readSmallInt",*/ "readInt", "readBigInt", "readSmallFloat", "readFloat" })
    protected Object readObject(final VirtualFrame frame) {
        if (!frame.isObject(getSlot())) {
            /*
             * The FrameSlotKind has been set to Object, so from now on all writes to the
             * local variable will be Object writes. However, now we are in a frame that
             * still has an old non-Object value. This is a slow-path operation: we read the
             * non-Object value, and write it immediately as an Object value so that we do
             * not hit this path again multiple times for the same variable of the same
             * frame.
             */
            CompilerDirectives.transferToInterpreter();
            final Object result = frame.getValue(getSlot());
            if(result == null) {
                throw new NotImplementedException();
            }
            frame.setObject(getSlot(), result);
            return result;
        }

        Object result = FrameUtil.getObjectSafe(frame, getSlot());
        if(result == null) {
            CompilerDirectives.transferToInterpreter();
            result = getType().getDefaultValue();
            frame.setObject(getSlot(), result);
        }
        return result;
    }

    @Override
    public boolean hasTag(final Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }

}
