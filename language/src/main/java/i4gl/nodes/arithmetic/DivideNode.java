package i4gl.nodes.arithmetic;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.Fallback;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import i4gl.exceptions.I4GLRuntimeException;
import i4gl.nodes.expression.BinaryExpressionNode;

/**
 * Node representing arithmetic division on numeric arguments.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link DivideNodeGen}
 */
@NodeInfo(shortName = "/")
public abstract class DivideNode extends BinaryExpressionNode {

    @Specialization(rewriteOn = ArithmeticException.class)
    protected short div(short left, short right) {
        short result = (short) (left / right);
        /*
         * The division overflows if left is Short.MIN_VALUE and right is -1.
         */
        if ((left & right & result) < 0) {
            throw new ArithmeticException("short overflow");
        }
        if ((left % right) != 0) {
            throw new ArithmeticException("int overflow");
        }
        return result;
    }

    @Specialization(rewriteOn = ArithmeticException.class)
    protected int div(int left, int right) {
        int result = left / right;
        /*
         * The division overflows if left is Int.MIN_VALUE and right is -1.
         */
        if ((left & right & result) < 0) {
            throw new ArithmeticException("int overflow");
        }
        if ((left % right) != 0) {
            throw new ArithmeticException("int overflow");
        }
        return result;
    }

    @Specialization(rewriteOn = ArithmeticException.class)
    protected long div(long left, long right) {
        long result = left / right;
        /*
         * The division overflows if left is Long.MIN_VALUE and right is -1.
         */
        if ((left & right & result) < 0) {
            throw new ArithmeticException("long overflow");
        }
        if ((left % right) != 0) {
            throw new ArithmeticException("int overflow");
        }
        return result;
    }

    @Specialization
    @TruffleBoundary
    protected float div(float left, float right) {
        return left / right;
    }

    @Specialization
    @TruffleBoundary
    protected double div(double left, double right) {
        return left / right;
    }

    @Fallback
    protected Object typeError(Object left, Object right) {
        throw new I4GLRuntimeException("Type error doing: " + left + " / " + right);
    }
}
