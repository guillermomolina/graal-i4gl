package i4gl.nodes.arithmetic;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.Fallback;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import i4gl.exceptions.I4GLRuntimeException;
import i4gl.nodes.expression.BinaryExpressionNode;

/**
 * Node representing arithmetic division on numeric arguments.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link DivideNodeGen}
 */
@NodeInfo(shortName = "/")
public abstract class DivideNode extends BinaryExpressionNode {

    @Specialization
    @TruffleBoundary
    protected double divideSmallInt(short left, short right) {
        return (double) left / (double) right;
    }

    @Specialization
    @TruffleBoundary
    protected double divideInt(int left, int right) {
        return (double) left / (double) right;
    }

    @Specialization
    @TruffleBoundary
    protected double divideBigInt(long left, long right) {
        return (double) left / (double) right;
    }

    @Specialization
    @TruffleBoundary
    protected double divideSmallFloat(float left, float right) {
        return (double) left / (double) right;
    }


    @Specialization
    @TruffleBoundary
    protected double div(double left, double right) {
        return left / right;
    }

    @Fallback
    protected Object typeError(Object left, Object right) {
        throw new I4GLRuntimeException("Type error doing: " + left + " / " + right);
    }
}
