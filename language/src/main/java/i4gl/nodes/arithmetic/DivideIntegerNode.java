package i4gl.nodes.arithmetic;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.Fallback;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import i4gl.nodes.expression.BinaryExpressionNode;
import i4gl.runtime.exceptions.I4GLRuntimeException;

/**
 * Node representing I4GL's div operation which is division on whole numbers.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link DivideIntegerNodeGen}
 */
@NodeInfo(shortName = "DIV")
public abstract class DivideIntegerNode extends BinaryExpressionNode {

    @Specialization(rewriteOn = ArithmeticException.class)
    protected int div(int left, int right) {
        int result = left / right;
        /*
         * The division overflows if left is Long.MIN_VALUE and right is -1.
         */
        if ((left & right & result) < 0) {
            throw new ArithmeticException("int overflow");
        }
        return result;
    }

    @Specialization
    @TruffleBoundary
    protected long div(long left, long right) {
        return left / right;
    }

    @Fallback
    protected Object typeError(Object left, Object right) {
        throw new I4GLRuntimeException("Type error doing: " + left + " div " + right);
    }
}
