package com.guillermomolina.i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import com.guillermomolina.i4gl.nodes.expression.I4GLExpressionNode;
import com.guillermomolina.i4gl.nodes.statement.I4GLStatementNode;
import com.guillermomolina.i4gl.runtime.types.I4GLType;
import com.guillermomolina.i4gl.runtime.types.primitive.I4GLBigIntType;
import com.guillermomolina.i4gl.runtime.types.primitive.I4GLFloatType;
import com.guillermomolina.i4gl.runtime.types.primitive.I4GLIntType;
import com.guillermomolina.i4gl.runtime.types.primitive.I4GLSmallFloatType;
import com.guillermomolina.i4gl.runtime.types.primitive.I4GLSmallIntType;
import com.guillermomolina.i4gl.runtime.values.I4GLRecord;

/**
 * Node representing assignment to a record. Compared to {@link I4GLAssignToLocalVariableNode} it assigns the value to the record's
 * frame instead of function's frame.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link AssignToRecordFieldNodeGen}
 */
@NodeChild(value = "recordNode", type = I4GLExpressionNode.class)
@NodeChild(value = "valueNode", type = I4GLExpressionNode.class)
public abstract class I4GLAssignToRecordFieldNode extends I4GLStatementNode {

    private final String identifier;
    private final I4GLType descriptor;

    I4GLAssignToRecordFieldNode(String identifier, I4GLType descriptor) {
        this.identifier = identifier;
        this.descriptor = descriptor;
    }

    protected boolean isSmallInt() {
        return descriptor == I4GLSmallIntType.SINGLETON;
    }

    @Specialization(guards = "isSmallInt()")
    void assignSmallInt(I4GLRecord record, short value) {
        record.put(identifier, value);
    }

    protected boolean isInt() {
        return descriptor == I4GLIntType.SINGLETON;
    }

    @Specialization(guards = "isInt()")
    void assignInt(I4GLRecord record, int value) {
        record.put(identifier, value);
    }

    protected boolean isBigInt() {
        return descriptor == I4GLBigIntType.SINGLETON;
    }

    @Specialization(guards = "isBigInt()")
    void assignBigInt(I4GLRecord record, long value) {
        record.put(identifier, value);
    }

    protected boolean isSmallFloat() {
        return descriptor == I4GLSmallFloatType.SINGLETON;
    }

    @Specialization(guards = "isSmallFloat()")
    void assignSmallFloat(I4GLRecord record, float value) {
        record.put(identifier, value);
    }

    protected boolean isFloat() {
        return descriptor == I4GLFloatType.SINGLETON;
    }

    @Specialization(guards = "isFloat()")
    void assignDouble(I4GLRecord record, double value) {
        record.put(identifier, value);
    }

    @Specialization
    void assignGeneric(I4GLRecord record, Object value) {
        record.put(identifier, value);
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
