package org.guillermomolina.i4gl.nodes.variables.write;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeChildren;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.dsl.TypeSystemReference;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;
import com.oracle.truffle.api.nodes.ExplodeLoop;

import org.guillermomolina.i4gl.nodes.I4GLExpressionNode;
import org.guillermomolina.i4gl.nodes.I4GLTypes;
import org.guillermomolina.i4gl.nodes.statement.I4GLStatementNode;
import org.guillermomolina.i4gl.parser.types.I4GLTypeDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.CharDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.TextDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.VarcharDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.CharValue;
import org.guillermomolina.i4gl.runtime.customvalues.VarcharValue;

/**
 * Node representing assignment to a variable of primitive type.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link SimpleAssignmentNodeGen}
 */
@NodeFields({ 
    @NodeField(name = "slot", type = FrameSlot.class),
    @NodeField(name = "typeDescriptor", type = I4GLTypeDescriptor.class)
})
@NodeChildren({
    @NodeChild(value = "indexNode", type = I4GLExpressionNode.class),
    @NodeChild(value = "valueNode", type = I4GLExpressionNode.class)

})
@TypeSystemReference(I4GLTypes.class)
public abstract class I4GLAssignToTextNode extends I4GLStatementNode {

    protected abstract FrameSlot getSlot();

    protected abstract I4GLTypeDescriptor getTypeDescriptor();

    @CompilerDirectives.CompilationFinal
    private int jumps = -1;
   
    protected boolean isChar() {
        return getTypeDescriptor() instanceof CharDescriptor;
    }
 
    @Specialization(guards = "isChar()")
    void assignChar(VirtualFrame frame, final int index, final String value) {
        final VirtualFrame actualFrame = getFrame(frame);

        Object targetObject = actualFrame.getValue(getSlot());
        if (!(targetObject instanceof CharValue)) {
            targetObject = getTypeDescriptor().getDefaultValue();
            actualFrame.setObject(getSlot(), targetObject);
        }

        final CharValue target = (CharValue) targetObject;
        target.setCharAt(index - 1, value.charAt(0));
    }
   
    protected boolean isVarchar() {
        return getTypeDescriptor() instanceof VarcharDescriptor;
    }
   
    @Specialization(guards = "isVarchar()")
    void assignVarchar(VirtualFrame frame, final int index, final String value) {
        final VirtualFrame actualFrame = getFrame(frame);

        Object targetObject = actualFrame.getValue(getSlot());
        if (!(targetObject instanceof VarcharValue)) {
            targetObject = getTypeDescriptor().getDefaultValue();
            actualFrame.setObject(getSlot(), targetObject);
        }

        final VarcharValue target = (VarcharValue) targetObject;
        target.setCharAt(index - 1, value.charAt(0));
    }

    protected boolean isText() {
        return getTypeDescriptor() instanceof TextDescriptor;
    }

    @Specialization(guards = "isText()")
    void assignText(VirtualFrame frame, final int index, final String value) {
        final VirtualFrame actualFrame = getFrame(frame);

        Object targetObject = actualFrame.getValue(getSlot());
        if (!(targetObject instanceof String)) {
            targetObject = "";
        }
        StringBuilder builder = new StringBuilder((String)targetObject);
        builder.setCharAt(index, value.charAt(0));
        actualFrame.setObject(getSlot(), builder.toString());
    }

    @ExplodeLoop
    private VirtualFrame getFrame(VirtualFrame frame) {
        if (jumps == -1) {
            jumps = this.getJumpsToFrame(frame, getSlot());
            CompilerDirectives.transferToInterpreterAndInvalidate();
        }

        for (int i = 0; i < jumps; ++i) {
            frame = (VirtualFrame) frame.getArguments()[0];
        }

        return frame;
    }

    @Override
    public boolean hasTag(final Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
