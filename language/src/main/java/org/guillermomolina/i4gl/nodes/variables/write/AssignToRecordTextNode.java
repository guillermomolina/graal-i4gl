package org.guillermomolina.i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeChildren;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlotTypeException;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.nodes.ExpressionNode;
import org.guillermomolina.i4gl.nodes.statement.I4GLStatementNode;
import org.guillermomolina.i4gl.parser.types.TypeDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.CharDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.TextDescriptor;
import org.guillermomolina.i4gl.parser.types.compound.VarcharDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.CharValue;
import org.guillermomolina.i4gl.runtime.customvalues.RecordValue;
import org.guillermomolina.i4gl.runtime.customvalues.VarcharValue;
import org.guillermomolina.i4gl.runtime.exceptions.UnexpectedRuntimeException;

/**
 * Node representing assignment to a record. Compared to
 * {@link SimpleAssignmentNode} it assigns the value to the record's frame
 * instead of function's frame.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToRecordFieldNodeGen}
 */
@NodeChildren({ @NodeChild(value = "recordNode", type = ExpressionNode.class),
        @NodeChild(value = "indexNode", type = ExpressionNode.class),
        @NodeChild(value = "valueNode", type = ExpressionNode.class) })
public abstract class AssignToRecordTextNode extends I4GLStatementNode {

    private final String identifier;
    private final TypeDescriptor descriptor;

    AssignToRecordTextNode(String identifier, TypeDescriptor descriptor) {
        this.identifier = identifier;
        this.descriptor = descriptor;
    }

    protected boolean isText() {
        return descriptor instanceof TextDescriptor;
    }

    @Specialization(guards = "isText()")
    void assignText(RecordValue record, int index, String value) {
        try {
            Object targetObject = record.getFrame().getObject(record.getSlot(this.identifier));
            if (!(targetObject instanceof String)) {
                targetObject = "";
            }
            StringBuilder builder = new StringBuilder((String)targetObject);
            builder.setCharAt(index, value.charAt(0));
            record.getFrame().setObject(record.getSlot(this.identifier), builder.toString());
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }
   
    protected boolean isChar() {
        return descriptor instanceof CharDescriptor;
    }
   
    @Specialization(guards = "isChar()")
    void assignChar(RecordValue record, int index, String value) {
        try {
            Object targetObject = record.getFrame().getObject(record.getSlot(this.identifier));
            if (!(targetObject instanceof CharValue)) {
                targetObject = descriptor.getDefaultValue();
                record.getFrame().setObject(record.getSlot(this.identifier), targetObject);
            }

            final CharValue target = (CharValue) targetObject;
            target.setCharAt(index - 1, value.charAt(0));
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }
   
    protected boolean isVarchar() {
        return descriptor instanceof VarcharDescriptor;
    }
   
    @Specialization(guards = "isVarchar()")
    void assignVarchar(RecordValue record, int index, String value) {
        try {
            Object targetObject = record.getFrame().getObject(record.getSlot(this.identifier));
            if (!(targetObject instanceof VarcharValue)) {
                targetObject = descriptor.getDefaultValue();
                record.getFrame().setObject(record.getSlot(this.identifier), targetObject);
            }

            final VarcharValue target = (VarcharValue) targetObject;
            target.setCharAt(index - 1, value.charAt(0));
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }
 
    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
