package org.guillermomolina.i4gl.nodes.logic;

import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import org.guillermomolina.i4gl.nodes.utils.BinaryArgumentPrimitiveTypes;
import org.guillermomolina.i4gl.nodes.BinaryExpressionNode;
import org.guillermomolina.i4gl.parser.identifierstable.types.primitive.BooleanDescriptor;

/**
 * Node representing logical or operation.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link OrNodeGen}
 */
@NodeInfo(shortName = "or")
public abstract class OrNode extends BinaryExpressionNode {

    OrNode() {
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BooleanDescriptor.getInstance(), BooleanDescriptor.getInstance()), BooleanDescriptor.getInstance());
    }

	@Specialization
	boolean logicalOr(boolean left, boolean right) {
		return left || right;
	}

}
