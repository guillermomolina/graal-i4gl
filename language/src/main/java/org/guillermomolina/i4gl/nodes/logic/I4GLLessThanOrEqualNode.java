package org.guillermomolina.i4gl.nodes.logic;

import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import org.guillermomolina.i4gl.nodes.expression.I4GLBinaryExpressionNode;
import org.guillermomolina.i4gl.runtime.types.I4GLType;
import org.guillermomolina.i4gl.runtime.types.primitive.I4GLIntType;

/**
 * Node representing less than or equal operation.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link LessThanOrEqualNodeGen}
 */
@NodeInfo(shortName = "<=")
public abstract class I4GLLessThanOrEqualNode extends I4GLBinaryExpressionNode {

    @Specialization
    int lessThanOrEqual(int left, int right) {
        return left <= right ? 1 : 0;
    }

    @Specialization
    @TruffleBoundary
    int lessThanOrEqual(short left, short right) {
        return left <= right ? 1 : 0;
    }

    @Specialization
    @TruffleBoundary
	int lessThanOrEqual(long left, long right) {
		return left <= right ? 1 : 0;
	}

    @Specialization
    @TruffleBoundary
	int lessThanOrEqual(float left, float right) {
		return left <= right ? 1 : 0;
	}

    @Specialization
    @TruffleBoundary
	int lessThanOrEqual(double left, double right) {
		return left <= right ? 1 : 0;
	}

    @Override
    public I4GLType getType() {
        return I4GLIntType.SINGLETON;
    }

}
