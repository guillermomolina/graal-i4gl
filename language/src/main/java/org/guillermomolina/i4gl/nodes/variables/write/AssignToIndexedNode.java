package org.guillermomolina.i4gl.nodes.variables.write;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.nodes.ExpressionNode;
import org.guillermomolina.i4gl.nodes.statement.I4GLStatementNode;
import org.guillermomolina.i4gl.runtime.customvalues.TextValue;

/**
 * Node representing assignment to an array. Compared to
 * {@link SimpleAssignmentNode} it has to receive also index.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link AssignToArrayNodeGen}
 */
@NodeChild(value = "arrayNode", type = ExpressionNode.class)
@NodeChild(value = "indexNode", type = ExpressionNode.class)
@NodeChild(value = "valueNode", type = ExpressionNode.class)
public abstract class AssignToIndexedNode extends I4GLStatementNode {

    @Specialization
    void assignInt(int[] array, int index, int value) {
        array[index - 1] = value;
    }

    @Specialization
    void assignLong(long[] array, int index, long value) {
        array[index - 1] = value;
    }

    @Specialization
    void assigFloat(float[] array, int index, float value) {
        array[index - 1] = value;
    }

    @Specialization
    void assignDouble(double[] array, int index, double value) {
        array[index - 1] = value;
    }

    @Specialization
    void assignToText(TextValue string, int index, TextValue value) {
        string.setValueAt(index - 1, value.getValueAt(0));
    }

    @Specialization
    void assignObject(Object[] array, int index, Object value) {
        array[index - 1] = value;
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }

}
