package org.guillermomolina.i4gl.nodes.variables.read;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.CompilerDirectives.CompilationFinal;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.FrameUtil;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.I4GLLanguage;
import org.guillermomolina.i4gl.exceptions.NotImplementedException;
import org.guillermomolina.i4gl.nodes.I4GLExpressionNode;
import org.guillermomolina.i4gl.runtime.types.I4GLType;

/**
 * This node reads value of specified global variable (by its frame slot).
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadGlobalVariableNodeGen}
 */

@NodeFields({ 
    @NodeField(name = "frameName", type = String.class),
    @NodeField(name = "slot", type = FrameSlot.class),
    @NodeField(name = "type", type = I4GLType.class)
})
public abstract class I4GLReadNonLocalVariableNode extends I4GLExpressionNode {
    @CompilationFinal
    protected VirtualFrame globalFrame;

    public abstract String getFrameName();
    
    protected abstract FrameSlot getSlot();
    
    @Specialization(guards = "getGlobalFrame().isInt(getSlot())")
    protected int readInt(final VirtualFrame frame) {
        return FrameUtil.getIntSafe(getGlobalFrame(), getSlot());
    }

    @Specialization(guards = "getGlobalFrame().isLong(getSlot())")
    protected long readBigInt(final VirtualFrame frame) {
        return FrameUtil.getLongSafe(getGlobalFrame(), getSlot());
    }
    
    @Specialization(guards = "getGlobalFrame().isFloat(getSlot())")
    protected float readSmallFloat(final VirtualFrame frame) {
        return FrameUtil.getFloatSafe(getGlobalFrame(), getSlot());
    }
    
    @Specialization(guards = "getGlobalFrame().isDouble(getSlot())")
    protected double readFloat(final VirtualFrame frame) {
        return FrameUtil.getDoubleSafe(getGlobalFrame(), getSlot());
    }

    @Specialization(replaces = { "readInt", "readBigInt", "readSmallFloat", "readFloat" })
    protected Object readObject(final VirtualFrame frame) {
        if (!getGlobalFrame().isObject(getSlot())) {
            /*
             * The FrameSlotKind has been set to Object, so from now on all writes to the
             * local variable will be Object writes. However, now we are in a frame that
             * still has an old non-Object value. This is a slow-path operation: we read the
             * non-Object value, and write it immediately as an Object value so that we do
             * not hit this path again multiple times for the same variable of the same
             * frame.
             */
            CompilerDirectives.transferToInterpreter();
            final Object result = getGlobalFrame().getValue(getSlot());
            if(result == null) {
                throw new NotImplementedException();
            }
            getGlobalFrame().setObject(getSlot(), result);
            return result;
        }

        Object result = FrameUtil.getObjectSafe(getGlobalFrame(), getSlot());
        if(result == null) {
            CompilerDirectives.transferToInterpreter();
            result = getType().getDefaultValue();
            getGlobalFrame().setObject(getSlot(), result);
        }
        return result;
    }

    protected VirtualFrame getGlobalFrame() {
        if(globalFrame == null) {
            CompilerDirectives.transferToInterpreterAndInvalidate();
            globalFrame = lookupContextReference(I4GLLanguage.class).get().getModuleFrame(getFrameName());
        }
        return globalFrame;
    }

    @Override
    public boolean hasTag(final Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }
}
