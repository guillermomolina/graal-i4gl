package org.guillermomolina.i4gl.nodes.logic;

import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import org.guillermomolina.i4gl.runtime.customvalues.EnumValue;
import org.guillermomolina.i4gl.runtime.customvalues.SetTypeValue;
import org.guillermomolina.i4gl.nodes.utils.BinaryArgumentPrimitiveTypes;
import org.guillermomolina.i4gl.nodes.BinaryExpressionNode;
import org.guillermomolina.i4gl.parser.identifierstable.types.TypeDescriptor;
import org.guillermomolina.i4gl.parser.identifierstable.types.compound.GenericEnumTypeDescriptor;
import org.guillermomolina.i4gl.parser.identifierstable.types.primitive.*;

/**
 * Node representing less than or equal operation.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link LessThanOrEqualNodeGen}
 */
@NodeInfo(shortName = "<=")
public abstract class LessThanOrEqualNode extends BinaryExpressionNode {

    LessThanOrEqualNode() {
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(IntDescriptor.getInstance(), IntDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(LongDescriptor.getInstance(), LongDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(LongDescriptor.getInstance(), IntDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(IntDescriptor.getInstance(), LongDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(LongDescriptor.getInstance(), LongDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(RealDescriptor.getInstance(), LongDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(LongDescriptor.getInstance(), RealDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(RealDescriptor.getInstance(), RealDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(CharDescriptor.getInstance(), CharDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BooleanDescriptor.getInstance(), BooleanDescriptor.getInstance()), BooleanDescriptor.getInstance());
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(GenericEnumTypeDescriptor.getInstance(), GenericEnumTypeDescriptor.getInstance()), BooleanDescriptor.getInstance());
    }

    @Specialization
    boolean lessThanOrEqual(int left, int right) {
        return left <= right;
    }

	@Specialization
	boolean lessThanOrEqual(long left, long right) {
		return left <= right;
	}

	@Specialization
	boolean lessThanOrEqual(double left, double right) {
		return left <= right;
	}

	@Specialization
	boolean lessThanOrEqual(char left, char right) {
		return left <= right;
	}

	@Specialization
	boolean lessThanOrEqual(boolean left, boolean right) {
		return !left && right;
	}

	@Specialization
	boolean lessThanOrEqual(SetTypeValue left, SetTypeValue right) {
		return (left.getSize() < right.getSize()) || (left.getSize() == right.getSize());
	}

	@Specialization
	boolean lessThanOrEqual(EnumValue left, EnumValue right) {
		return left.lesserThan(right) || left.equals(right);
	}

    @Override
    public boolean verifyNonPrimitiveArgumentTypes(TypeDescriptor leftType, TypeDescriptor rightType) {
        return this.verifyBothCompatibleSetTypes(leftType, rightType);
    }

    @Override
    public TypeDescriptor getType() {
        return BooleanDescriptor.getInstance();
    }

}
