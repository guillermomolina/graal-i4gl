package org.guillermomolina.i4gl.nodes.logic;

import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;
import org.guillermomolina.i4gl.runtime.customvalues.SetTypeValue;
import org.guillermomolina.i4gl.exceptions.NotImplementedException;
import org.guillermomolina.i4gl.nodes.BinaryExpressionNode;
import org.guillermomolina.i4gl.parser.identifierstable.types.TypeDescriptor;
import org.guillermomolina.i4gl.parser.identifierstable.types.compound.SetDescriptor;

/**
 * Node representing in operation. This operation is used for set types.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link InNodeGen}
 */
@NodeInfo(shortName = "in")
public abstract class InNode extends BinaryExpressionNode {

    @Override
    public boolean verifyChildrenNodeTypes() {
        if (!(getRightNode().getType() instanceof SetDescriptor)) {
            return false;
        }

        TypeDescriptor valueType = getLeftNode().getType();
        SetDescriptor set = (SetDescriptor) getRightNode().getType();
        return set.getInnerType() == valueType || valueType.convertibleTo(set.getInnerType());
    }

    @Specialization
    boolean inOperation(Object o, SetTypeValue set) {
        return set.contains(o);
    }

    @Override
    public TypeDescriptor getType() {
        throw new NotImplementedException();
        //return BooleanDescriptor.getInstance();
    }

}
