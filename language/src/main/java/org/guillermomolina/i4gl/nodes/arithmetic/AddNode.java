package org.guillermomolina.i4gl.nodes.arithmetic;

import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.nodes.NodeInfo;

import org.guillermomolina.i4gl.nodes.BinaryExpressionNode;
import org.guillermomolina.i4gl.nodes.utils.BinaryArgumentPrimitiveTypes;
import org.guillermomolina.i4gl.parser.types.primitive.BigIntDescriptor;
import org.guillermomolina.i4gl.parser.types.primitive.FloatDescriptor;
import org.guillermomolina.i4gl.parser.types.primitive.IntDescriptor;
import org.guillermomolina.i4gl.parser.types.primitive.SmallFloatDescriptor;

/**
 * Node representing plus operation. For numeric arguments it is addition and for set arguments it represents union.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link AddNodeGen}
 */
@NodeInfo(shortName = "+")
public abstract class AddNode extends BinaryExpressionNode {

    AddNode() {
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(IntDescriptor.SINGLETON, IntDescriptor.SINGLETON), IntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BigIntDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), BigIntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BigIntDescriptor.SINGLETON, IntDescriptor.SINGLETON), BigIntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(IntDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), BigIntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(IntDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), BigIntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BigIntDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), BigIntDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(FloatDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BigIntDescriptor.SINGLETON, FloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(SmallFloatDescriptor.SINGLETON, BigIntDescriptor.SINGLETON), SmallFloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(BigIntDescriptor.SINGLETON, SmallFloatDescriptor.SINGLETON), SmallFloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(SmallFloatDescriptor.SINGLETON, SmallFloatDescriptor.SINGLETON), SmallFloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(FloatDescriptor.SINGLETON, FloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(FloatDescriptor.SINGLETON, SmallFloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(SmallFloatDescriptor.SINGLETON, FloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(SmallFloatDescriptor.SINGLETON, FloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
        this.typeTable.put(new BinaryArgumentPrimitiveTypes(FloatDescriptor.SINGLETON, FloatDescriptor.SINGLETON), FloatDescriptor.SINGLETON);
    }

    @Specialization
    protected int add(int left, int right) {
        return Math.addExact(left, right);
    }

    @Specialization
    protected long add(long left, long right) {
        return Math.addExact(left, right);
    }

	@Specialization
	protected float add(float left, float right) {
		return left + right;
	}

	@Specialization
	protected double add(double left, double right) {
		return left + right;
	}
}
