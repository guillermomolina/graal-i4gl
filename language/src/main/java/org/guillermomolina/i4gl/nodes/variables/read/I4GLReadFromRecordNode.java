package org.guillermomolina.i4gl.nodes.variables.read;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.FrameUtil;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.nodes.I4GLExpressionNode;
import org.guillermomolina.i4gl.parser.types.I4GLTypeDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.RecordValue;

/**
 * This node reads value from an record with specified identifier.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromRecordNodeGen}
 */
@NodeChild(value = "record", type = I4GLExpressionNode.class)
@NodeFields({
    @NodeField(name = "identifier", type = String.class),
    @NodeField(name = "returnType", type = I4GLTypeDescriptor.class)
})
public abstract class I4GLReadFromRecordNode extends I4GLExpressionNode {

    protected abstract I4GLTypeDescriptor getReturnType();

    protected abstract String getIdentifier();

    @Specialization(guards = "isInt()")
    int readInt(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        return FrameUtil.getIntSafe(record.getFrame(), slot);
    }

    @Specialization(guards = "isBigInt()")
    long readBigInt(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        return FrameUtil.getLongSafe(record.getFrame(), slot);
    }

    @Specialization(guards = "isSmallFloat()")
    float readSmallFloat(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        return FrameUtil.getFloatSafe(record.getFrame(), slot);
    }

    @Specialization(guards = "isDouble()")
    double readDouble(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        return FrameUtil.getDoubleSafe(record.getFrame(), slot);
    }

    @Specialization(replaces = { "readInt", "readBigInt", "readSmallFloat", "readDouble" })
    Object readGeneric(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        VirtualFrame frame = record.getFrame();
        if (!frame.isObject(slot)) {
            /*
             * The FrameSlotKind has been set to Object, so from now on all writes to the
             * local variable will be Object writes. However, now we are in a frame that
             * still has an old non-Object value. This is a slow-path operation: we read the
             * non-Object value, and write it immediately as an Object value so that we do
             * not hit this path again multiple times for the same variable of the same
             * frame.
             */
            CompilerDirectives.transferToInterpreter();
            final Object result = record.getFrame().getValue(slot);
            frame.setObject(slot, result);
            return result;
        }
        return FrameUtil.getObjectSafe(frame, slot);
    }

    @Override
    public I4GLTypeDescriptor getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }
}
