package org.guillermomolina.i4gl.nodes.variables.read;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.FrameSlotTypeException;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.nodes.I4GLExpressionNode;
import org.guillermomolina.i4gl.parser.types.I4GLTypeDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.RecordValue;
import org.guillermomolina.i4gl.runtime.exceptions.UnexpectedRuntimeException;

/**
 * This node reads value from an record with specified identifier.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromRecordNodeGen}
 */
@NodeChild(value = "record", type = I4GLExpressionNode.class)
@NodeFields({
    @NodeField(name = "identifier", type = String.class),
    @NodeField(name = "returnType", type = I4GLTypeDescriptor.class)
})
public abstract class I4GLReadFromRecordNode extends I4GLExpressionNode {

    protected abstract I4GLTypeDescriptor getReturnType();

    protected abstract String getIdentifier();

    @Specialization(guards = "isInt()")
    int readInt(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        try {
            return record.getFrame().getInt(slot);
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }

    @Specialization(guards = "isBigInt()")
    long readBigInt(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        try {
            return record.getFrame().getLong(slot);
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }

    @Specialization(guards = "isSmallFloat()")
    float readSmallFloat(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        try {
            return record.getFrame().getFloat(slot);
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }

    @Specialization(guards = "isFloat()")
    double readFloat(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        try {
            return record.getFrame().getDouble(slot);
        } catch (FrameSlotTypeException e) {
            throw new UnexpectedRuntimeException();
        }
    }

    @Specialization
    Object readGeneric(RecordValue record) {
        FrameSlot slot = record.getSlot(this.getIdentifier());
        return record.getFrame().getValue(slot);
    }

    @Override
    public I4GLTypeDescriptor getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }
}
