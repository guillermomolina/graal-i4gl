package org.guillermomolina.i4gl.nodes.call;

import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.instrumentation.StandardTags.ReadVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;

import org.guillermomolina.i4gl.nodes.ExpressionNode;
import org.guillermomolina.i4gl.nodes.variables.read.ReadFromRecordNodeGen;
import org.guillermomolina.i4gl.parser.types.TypeDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.ReturnValue;

/**
 * This node reads value from an valuenode with specified identifier.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link ReadFromRecordNodeGen}
 */
@NodeChild(value = "valuenode", type = ExpressionNode.class)
@NodeFields({
    @NodeField(name = "index", type = Integer.class),
    @NodeField(name = "returnType", type = TypeDescriptor.class)
})
public abstract class ReadFromReturnNode extends ExpressionNode {

    protected abstract TypeDescriptor getReturnType();

    protected abstract int getIndex();

    @Specialization(guards = "isInt()")
    int readInt(ReturnValue valuenode) {
        return (int) valuenode.getValueAt(getIndex());
    }

    @Specialization(guards = "isLong()")
    long readLong(ReturnValue valuenode) {
        return (long) valuenode.getValueAt(getIndex());
    }

    @Specialization(guards = "isDouble()")
    double readDouble(ReturnValue valuenode) {
        return (double) valuenode.getValueAt(getIndex());
    }

    @Specialization(guards = "isFloat()")
    float readFloat(ReturnValue valuenode) {
        return (float) valuenode.getValueAt(getIndex());
    }

    @Specialization
    Object readGeneric(ReturnValue valuenode) {
        return valuenode.getValueAt(getIndex());
    }

    @Override
    public TypeDescriptor getType() {
        return this.getReturnType();
    }

    @Override
    public boolean hasTag(Class<? extends Tag> tag) {
        return tag == ReadVariableTag.class || super.hasTag(tag);
    }
}
