package org.guillermomolina.i4gl.nodes.variables.write;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.dsl.NodeChild;
import com.oracle.truffle.api.dsl.NodeChildren;
import com.oracle.truffle.api.dsl.NodeField;
import com.oracle.truffle.api.dsl.NodeFields;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.dsl.TypeSystemReference;
import com.oracle.truffle.api.frame.FrameSlot;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.instrumentation.StandardTags.WriteVariableTag;
import com.oracle.truffle.api.instrumentation.Tag;
import com.oracle.truffle.api.nodes.ExplodeLoop;

import org.guillermomolina.i4gl.I4GLTypes;
import org.guillermomolina.i4gl.nodes.ExpressionNode;
import org.guillermomolina.i4gl.nodes.statement.I4GLStatementNode;
import org.guillermomolina.i4gl.parser.types.TypeDescriptor;
import org.guillermomolina.i4gl.runtime.customvalues.NullValue;
import org.guillermomolina.i4gl.runtime.customvalues.TextValue;
import org.guillermomolina.i4gl.runtime.exceptions.I4GLRuntimeException;

/**
 * Node representing assignment to a variable of primitive type.
 *
 * This node uses specializations which means that it is not used directly but
 * completed node is generated by Truffle. {@link SimpleAssignmentNodeGen}
 */
@NodeFields({ 
    @NodeField(name = "slot", type = FrameSlot.class),
    @NodeField(name = "typeDescriptor", type = TypeDescriptor.class)
})
@NodeChildren({
    @NodeChild(value = "indexNode", type = ExpressionNode.class),
    @NodeChild(value = "valueNode", type = ExpressionNode.class)

})
@TypeSystemReference(I4GLTypes.class)
public abstract class AssignToTextNode extends I4GLStatementNode {

    protected abstract FrameSlot getSlot();

    protected abstract TypeDescriptor getTypeDescriptor();

    @CompilerDirectives.CompilationFinal
    private int jumps = -1;

    @Specialization
    void assignString(VirtualFrame frame, final int index, final TextValue value) {
        final VirtualFrame actualFrame = getFrame(frame);

        Object targetObject = actualFrame.getValue(getSlot());
        if (targetObject instanceof NullValue) {
            targetObject = getTypeDescriptor().getDefaultValue();
            actualFrame.setObject(getSlot(), targetObject);
        }

        if (targetObject instanceof TextValue) {
            final TextValue target = (TextValue) targetObject;
            target.setValueAt(index -1, value.toString());
        } else {
            throw new I4GLRuntimeException("Can not assign to a non string variable");
        }
    }

    @ExplodeLoop
    private VirtualFrame getFrame(VirtualFrame frame) {
        if (jumps == -1) {
            jumps = this.getJumpsToFrame(frame, getSlot());
            CompilerDirectives.transferToInterpreterAndInvalidate();
        }

        for (int i = 0; i < jumps; ++i) {
            frame = (VirtualFrame) frame.getArguments()[0];
        }

        return frame;
    }

    @Override
    public boolean hasTag(final Class<? extends Tag> tag) {
        return tag == WriteVariableTag.class || super.hasTag(tag);
    }
}
