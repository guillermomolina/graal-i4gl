package org.guillermomolina.i4gl.nodes.call;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.dsl.Specialization;
import com.oracle.truffle.api.frame.VirtualFrame;
import com.oracle.truffle.api.nodes.ExplodeLoop;
import com.oracle.truffle.api.nodes.NodeInfo;

import org.guillermomolina.i4gl.I4GLLanguage;
import org.guillermomolina.i4gl.nodes.ExpressionNode;
import org.guillermomolina.i4gl.runtime.customvalues.I4GLSubroutine;
import org.guillermomolina.i4gl.parser.identifierstable.types.TypeDescriptor;

/**
 * Node representing invocation of a subroutine. Subroutines are stored in frame belonging to the scope where the subroutine
 * was defined.
 *
 * This node uses specializations which means that it is not used directly but completed node is generated by Truffle.
 * {@link InvokeNodeGen}
 */
@NodeInfo(shortName = "invoke")
public abstract class InvokeNode extends ExpressionNode {

    private final I4GLLanguage language;
    private final String subroutineIdentifier;
    private final TypeDescriptor type;
    @Children private final ExpressionNode[] argumentNodes;
    @CompilerDirectives.CompilationFinal private I4GLSubroutine subroutine;

	InvokeNode(I4GLLanguage language, String identifier, ExpressionNode[] argumentNodes, TypeDescriptor type) {
        this.language = language;
        this.subroutineIdentifier = identifier;
	    this.argumentNodes = argumentNodes;
	    this.type = type;
	}

	@Specialization
	Object invoke(VirtualFrame frame) {
	    if (subroutine == null) {
	        CompilerDirectives.transferToInterpreterAndInvalidate();
	        subroutine = getSubroutine();
        }
        Object[] argumentValues = this.evaluateArguments(frame);

        return subroutine.getCallTarget().call(argumentValues);
	}

    @Override
    public TypeDescriptor getType() {
	    return type;
    }

    private I4GLSubroutine getSubroutine() {
        return language.getSubroutine(this.subroutineIdentifier);
    }

    @ExplodeLoop
    private Object[] evaluateArguments(VirtualFrame frame) {
        Object[] argumentValues = new Object[argumentNodes.length + 1];
        argumentValues[0] = frame;
        for (int i = 0; i < argumentNodes.length; i++) {
            argumentValues[i+1] = argumentNodes[i].executeGeneric(frame);
        }

        return argumentValues;
    }
}
